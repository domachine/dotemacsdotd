
(defun insert-into-buffer (buffer &rest args)
  "Simply saves current buffer and writes ARGS to target buffer."

  (with-current-buffer buffer
    (apply 'insert args)))

;;;###autoload
(defun ftp-upload-file-list (bookmark)
  "Uploads a file list in the current buffer (Generated by `find' for example)
   to a ftp-server."

  (interactive "sBookmark: ")
  (save-excursion
    (let ((output-buffer (generate-new-buffer "upload-script.sh")))
      (beginning-of-buffer)

      (insert-into-buffer output-buffer "open "
                          (shell-quote-argument bookmark) "\n")

      ;; Loop through all lines that look like files.
      (while (search-forward-regexp "^\\([^;\n].+\\)$" nil t)
        ;; Parse filepath.
        (let ((filepath (match-string 1))
              (directory (file-name-directory (match-string 1))))

          (save-excursion
            (let ((end-point (point))
                  next-mkdir)
              (beginning-of-line)

              ;; Loop through all directory parts and make sure that they exist
              ;; on the target-host.
              (while (search-forward-regexp "\\([^\\/\n]+\\)/" end-point t)
                (setq next-mkdir (concat next-mkdir
                                         "/"
                                         (shell-quote-argument (match-string 1))))

                ;; Generate the mkdir command
                (insert-into-buffer output-buffer "mkdir " next-mkdir "\n"))))

          (with-current-buffer output-buffer
            ;; Generate the put command with directory-change.
            (insert "cd " (shell-quote-argument directory) "\n")
            (insert "put -f " (shell-quote-argument filepath) "\n")
            (insert "cd /\n"))))

      ;; Finalize with exit
      (insert-into-buffer output-buffer "exit\n")

      ;; Run the command
      (let ((process-connection-type nil) ; Use pipe
            (process-buffer (generate-new-buffer "*Ftp output*"))
            process)

        ;; Launch process
        (setq process
              (start-process "ncftp" process-buffer "ncftp"))

        (with-current-buffer process-buffer
          (shell-mode))
        
        ;; Send ftp commands.
        (with-current-buffer output-buffer
          (end-of-buffer)
          (process-send-region process 1 (point)))

        ;; Show the result.
        (let ((win (selected-window)))
          (set-window-buffer win process-buffer)))

      ;; Clean up.
      (kill-buffer output-buffer))))

(provide 'ftputils)
